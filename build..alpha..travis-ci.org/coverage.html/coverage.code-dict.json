{"/home/travis/build/npmtest/node-npmtest-schemapack/test.js":"/* istanbul instrument in package npmtest_schemapack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-schemapack/lib.npmtest_schemapack.js":"/* istanbul instrument in package npmtest_schemapack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_schemapack = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_schemapack = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-schemapack/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-schemapack && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_schemapack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_schemapack\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_schemapack.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_schemapack.rollup.js'] =\n            local.assetsDict['/assets.npmtest_schemapack.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_schemapack.__dirname + '/lib.npmtest_schemapack.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-schemapack/node_modules/schemapack/schemapack.js":"// MIT License\n// Source: https://github.com/phretaddin/schemapack\n\n'use strict';\n\nvar Buffer = require('buffer').Buffer;\nvar strEnc = 'utf8';\nvar validateByDefault = true;\nvar aliasTypes = {};\n\nfunction addTypeAlias(newTypeName, underlyingType) {\n  var everyType = Object.keys(readTypeDictStr);\n\n  if (everyType.indexOf(underlyingType) < 0) { throw new TypeError(\"Underlying type does not exist. Typo?\"); }\n  else { aliasTypes[newTypeName] = underlyingType; }\n}\n\nfunction getDataType(val) {\n  var everyType = Object.keys(readTypeDictStr);\n  var dataType = val.trim().toLowerCase();\n  if (aliasTypes.hasOwnProperty(dataType)) { dataType = aliasTypes[dataType]; }\n  if (everyType.indexOf(dataType) === -1) { throw new TypeError(\"Invalid data type for schema: \" + val + \" -> \" + dataType); }\n  return dataType;\n}\n\nfunction setValidateByDefault(flag) { validateByDefault = flag; }\n\nfunction setStringEncoding(stringEncoding) {\n  var requested = stringEncoding.trim().toLowerCase();\n  var available = [ 'ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'binary', 'hex' ];\n  if (available.indexOf(requested) > -1) { strEnc = requested; }\n  else { throw new TypeError(\"String encoding not available\"); }\n}\n\nfunction writeVarUInt(value, wBuffer) {\n  while (value > 127) {\n    wBuffer[bag.byteOffset++] = (value & 127) | 128;\n    value >>= 7;\n  }\n  wBuffer[bag.byteOffset++] = value & 127;\n}\n\nfunction writeVarInt(value, wBuffer) {\n  writeVarUInt((value << 1) ^ (value >> 31), wBuffer);\n}\n\nfunction readVarUInt(buffer) {\n  var val = 0, i = 0, b;\n\n  do {\n    b = buffer[bag.byteOffset++];\n    val |= (b & 127) << (7 * i);\n    i++;\n  } while (b & 128);\n\n  return val;\n}\n\nfunction readVarInt(buffer) {\n  var val = readVarUInt(buffer);\n  return (val >>> 1) ^ -(val & 1);\n}\n\nfunction writeString(val, wBuffer) {\n  var len = Buffer.byteLength(val || '', strEnc);\n  writeVarUInt(len, wBuffer);\n  bag.byteOffset += wBuffer.write(val || '', bag.byteOffset, len, strEnc);\n}\n\nfunction readString(buffer) {\n  var len = readVarUInt(buffer);\n  var str = buffer.toString(strEnc, bag.byteOffset, bag.byteOffset + len);\n  bag.byteOffset += len;\n  return str;\n}\n\nfunction writeBuffer(val, wBuffer) {\n  var len = val.length;\n  writeVarUInt(len, wBuffer);\n  val.copy(wBuffer, bag.byteOffset);\n  bag.byteOffset += len;\n}\n\nfunction readBuffer(buffer) {\n  var len = readVarUInt(buffer);\n  var buff = allocUnsafe(len);\n  buffer.copy(buff, 0, bag.byteOffset, bag.byteOffset + len);\n  bag.byteOffset += len;\n  return buff;\n}\n\nvar readTypeDictStr = {\n  \"boolean\": \"!!buffer.readUInt8(bag.byteOffset, true); bag.byteOffset += 1;\",\n  \"int8\": \"buffer.readInt8(bag.byteOffset, true); bag.byteOffset += 1;\",\n  \"uint8\": \"buffer.readUInt8(bag.byteOffset, true); bag.byteOffset += 1;\",\n  \"int16\": \"buffer.readInt16BE(bag.byteOffset, true); bag.byteOffset += 2;\",\n  \"uint16\": \"buffer.readUInt16BE(bag.byteOffset, true); bag.byteOffset += 2;\",\n  \"int32\": \"buffer.readInt32BE(bag.byteOffset, true); bag.byteOffset += 4;\",\n  \"uint32\": \"buffer.readUInt32BE(bag.byteOffset, true); bag.byteOffset += 4;\",\n  \"float32\": \"buffer.readFloatBE(bag.byteOffset, true); bag.byteOffset += 4;\",\n  \"float64\": \"buffer.readDoubleBE(bag.byteOffset, true); bag.byteOffset += 8;\",\n  \"string\": \"bag.readString(buffer);\",\n  \"varuint\": \"bag.readVarUInt(buffer);\",\n  \"varint\": \"bag.readVarInt(buffer);\",\n  \"buffer\": \"bag.readBuffer(buffer);\"\n};\n\nfunction getWriteTypeDictStr(dataType, valStr) {\n  switch (dataType) {\n    case \"boolean\": return \"bag.byteOffset = wBuffer.writeUInt8(\" + valStr + \" ? 1 : 0, bag.byteOffset, true);\";\n    case \"int8\": return \"bag.byteOffset = wBuffer.writeInt8(\" + valStr + \", bag.byteOffset, true);\";\n    case \"uint8\": return \"bag.byteOffset = wBuffer.writeUInt8(\" + valStr + \", bag.byteOffset, true);\";\n    case \"int16\": return \"bag.byteOffset = wBuffer.writeInt16BE(\" + valStr + \", bag.byteOffset, true);\";\n    case \"uint16\": return \"bag.byteOffset = wBuffer.writeUInt16BE(\" + valStr + \", bag.byteOffset, true);\";\n    case \"int32\": return \"bag.byteOffset = wBuffer.writeInt32BE(\" + valStr + \", bag.byteOffset, true);\";\n    case \"uint32\": return \"bag.byteOffset = wBuffer.writeUInt32BE(\" + valStr + \", bag.byteOffset, true);\";\n    case \"float32\": return \"bag.byteOffset = wBuffer.writeFloatBE(\" + valStr + \", bag.byteOffset, true);\";\n    case \"float64\": return \"bag.byteOffset = wBuffer.writeDoubleBE(\" + valStr + \", bag.byteOffset, true);\";\n    case \"string\": return \"bag.writeString(\" + valStr + \", wBuffer);\";\n    case \"varuint\": return \"bag.writeVarUInt(\" + valStr + \", wBuffer);\";\n    case \"varint\": return \"bag.writeVarInt(\" + valStr + \", wBuffer);\";\n    case \"buffer\": return \"bag.writeBuffer(\" + valStr + \", wBuffer);\";\n  }\n}\n\nvar constantByteCounts = { \"boolean\": 1, \"int8\": 1, \"uint8\": 1, \"int16\": 2, \"uint16\": 2, \"int32\": 4, \"uint32\": 4, \"float32\": 4, \"float64\": 8 };\n\nvar dynamicByteCounts = {\n  \"string\": function(val) { var len = Buffer.byteLength(val, strEnc); return getVarUIntByteLength(len) + len; },\n  \"varuint\": function(val) { return getVarUIntByteLength(val); },\n  \"varint\": function(val) { return getVarIntByteLength(val); },\n  \"buffer\": function(val) { var len = val.length; return getVarUIntByteLength(len) + len; }\n};\n\nfunction getVarUIntByteLength(val) {\n  if (val <= 0) { return 1; }\n  return Math.floor(Math.log(val) / Math.log(128)) + 1;\n}\n\nfunction getVarIntByteLength(value) {\n  return getVarUIntByteLength((value << 1) ^ (value >> 31));\n}\n\nvar allocUnsafe = Buffer.allocUnsafe ? function(n) {\n  return Buffer.allocUnsafe(n);\n} : function(n) {\n  return new Buffer(n);\n};\n\nvar bufferFrom = Buffer.from ? function(buf) {\n  return Buffer.from(buf);\n} : function(buf) {\n  return new Buffer(buf);\n};\n\nvar bag = {};\nbag.allocUnsafe = allocUnsafe;\nbag.getVarUIntByteLength = getVarUIntByteLength;\nbag.dynamicByteCounts = dynamicByteCounts;\nbag.readVarUInt = readVarUInt;\nbag.readVarInt = readVarInt;\nbag.writeVarUInt = writeVarUInt;\nbag.writeVarInt = writeVarInt;\nbag.readString = readString;\nbag.writeString = writeString;\nbag.readBuffer = readBuffer;\nbag.writeBuffer = writeBuffer;\nbag.throwTypeError = throwTypeError;\nbag.byteOffset = 0;\n\nfunction processArrayEnd(val, id, commands, stackLen, arrLenStr) {\n  var repID = stackLen <= 1 ? id : id + \"xn\";\n  var outerBound = arrLenStr === undefined ? \"ref\" + repID + \".length\" : arrLenStr;\n  var jStr = \"j\" + id;\n\n  return \"for (var \" + jStr + \"=\" + (val.length - 1) + \";\" + jStr + \"<\" + outerBound + \";\" + jStr + \"++) { \" + commands + \"}\";\n}\n\nfunction getArrayLengthByteCount(id) {\n  return \"byteC+=bag.getVarUIntByteLength(ref\" + id + \".length);\";\n}\n\nfunction encodeArrayLength(id) {\n  return \"bag.writeVarUInt(ref\" + id + \".length,wBuffer);\";\n}\n\nfunction decodeArrayLength(arrLenStr) {\n  return \"var \" + arrLenStr + \"=bag.readVarUInt(buffer);\";\n}\n\nfunction declareDecodeRef(id, parentID, prop, container) {\n  return \"var ref\" + id + \"=\" + container + \"; ref\" + parentID + \"[\" + prop + \"]=ref\" + id + \";\";\n}\n\nfunction declareEncodeRef(id, parentID, prop) {\n  return \"var ref\" + id + \"=ref\" + parentID + \"[\" + prop + \"];\";\n}\n\nfunction declareRepeatRefs(repItem, id, parentID, prop, container, repEncArrStack, repDecArrStack, repByteCountStack) {\n  var repID = getXN(repEncArrStack, id);\n  var parentIDXN = getXN(repEncArrStack, parentID);\n  var index = repItem ? \"j\" + parentID : prop;\n\n  repEncArrStack[repEncArrStack.length - 1] += declareEncodeRef(id + \"xn\", parentIDXN, index);\n  repDecArrStack[repDecArrStack.length - 1] += declareDecodeRef(id + \"xn\", parentIDXN, index, container);\n  repByteCountStack[repByteCountStack.length - 1] += declareEncodeRef(id + \"xn\", parentIDXN, index);;\n}\n\nfunction throwTypeError(valStr, typeStr, min, max, schemaType) {\n  if (typeof valStr !== typeStr) { throw new TypeError(valStr + \" does not match the type of \" + typeStr); }\n  else if (min !== undefined && valStr < min) { throw new TypeError(valStr + \" is less than minimum allowed value of \" + min + \" for schema type \" + schemaType); }\n  else if (max !== undefined && valStr > max) { throw new TypeError(valStr + \" is greater than maximum allowed value of \" + max + \" for schema type \" + schemaType); }\n}\n\nfunction getCheckBufferStr(valStr) {\n  var throwMessage = \"bag.throwTypeError(\" + valStr + \",'Buffer or Uint8Array');\";\n  return \"if (\" + valStr + \" instanceof Uint8Array === false && \" + valStr + \" instanceof Buffer === false){\" + throwMessage + \"}\";\n}\n\nfunction getCheckDataTypeStr(valStr, typeStr) {\n  var throwMessage = \"bag.throwTypeError(\" + valStr + \",'\" + typeStr + \"');\";\n  return \"if (typeof(\" + valStr + \") !== '\" + typeStr + \"'){\" + throwMessage + \"}\";\n}\n\nfunction getBoundsCheckStr(valStr, min, max, schemaType) {\n  var throwMessage = \"bag.throwTypeError(\" + valStr + \",'number',\" + min + \",\" + max + \",'\" + schemaType + \"');\";\n  return \"if (typeof(\" + valStr + \") !== 'number'||\" + valStr + \"<\" + min + \"||\" + valStr + \">\" + max + \"){\" + throwMessage + \"}\";\n}\n\nfunction validateDataType(dataType, valStr) {\n  var maxFloat = 3.4028234663852886e+38;\n\n  switch (dataType) {\n    case \"boolean\": return getCheckDataTypeStr(valStr, \"boolean\");\n    case \"int8\": return getBoundsCheckStr(valStr, -0x80, 0x7f, \"int8\");\n    case \"uint8\": return getBoundsCheckStr(valStr, 0, 0xff, \"uint8\");\n    case \"int16\": return getBoundsCheckStr(valStr, -0x8000, 0x7fff, \"int16\");\n    case \"uint16\": return getBoundsCheckStr(valStr, 0, 0xffff, \"uint16\");\n    case \"int32\": return getBoundsCheckStr(valStr, -0x80000000, 0x7fffffff, \"int32\");\n    case \"uint32\": return getBoundsCheckStr(valStr, 0, 0xffffffff, \"uint32\");\n    case \"float32\": return getBoundsCheckStr(valStr, -maxFloat, maxFloat, \"float32\");\n    case \"float64\": return getBoundsCheckStr(valStr, -Number.MAX_VALUE, Number.MAX_VALUE, \"float64\");\n    case \"string\": return getCheckDataTypeStr(valStr, \"string\");\n    case \"varuint\": return getBoundsCheckStr(valStr, 0, 0x7fffffff, \"varuint\");\n    case \"varint\": return getBoundsCheckStr(valStr, -0x40000000, 0x3fffffff, \"varint\");\n    case \"buffer\": return getCheckBufferStr(valStr);\n  }\n}\n\nfunction encodeValue(dataType, id, prop, validate) {\n  var varName = \"ref\" + id + prop;\n  return (validate ? validateDataType(dataType, varName) : \"\") + getWriteTypeDictStr(dataType, varName);\n}\n\nfunction decodeValue(dataType, id, prop) {\n  return \"ref\" + id + prop + \"=\" + readTypeDictStr[dataType];\n}\n\nfunction encodeByteCount(dataType, id, prop) {\n  var isConstant = constantByteCounts.hasOwnProperty(dataType);\n\n  if (isConstant) { return \"byteC+=\" + constantByteCounts[dataType] + \";\"; }\n  else { return \"byteC+=bag.dynamicByteCounts['\" + dataType + \"'](ref\" + id + prop + \");\"; }\n}\n\nfunction getXN(aStack, id) {\n  return aStack.length <= 2 && aStack[aStack.length - 1].length <= 0 ? id : id + \"xn\";\n}\n\nfunction getCompiledSchema(schema, validate) {\n  var strEncodeFunction = \"bag.byteOffset=0;\";\n  var strDecodeFunction = \"var ref1={}; bag.byteOffset=0;\";\n  var strByteCount = \"\";\n  var strEncodeRefDecs = \"var ref1=json;\";\n  var incID = 0;\n\n  var repEncArrStack = [\"\"];\n  var repDecArrStack = [\"\"];\n  var repByteCountStack = [\"\"];\n  var tmpRepEncArr = \"\";\n  var tmpRepDecArr = \"\";\n  var tmpRepByteCount = \"\";\n\n  schema = { 'a': schema };\n\n  function compileSchema(json, inArray) {\n    incID++;\n    var keys = Object.keys(json);\n    keys.sort(function(a, b) { return a < b ? -1 : (a > b ? 1 : 0); });\n\n    var saveID = incID;\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var val = json[key];\n\n      if (inArray) { key = +key; }\n\n      var prop = typeof key === \"number\" ? key : \"'\" + key + \"'\";\n      var container = val.constructor === Array ? \"[]\" : \"{}\";\n      var isRepArrItem = inArray && i >= keys.length - 1;\n\n      if (isRepArrItem) {\n        repEncArrStack.push(\"\");\n        repDecArrStack.push(\"\");\n        repByteCountStack.push(\"\");\n      }\n\n      if (val.constructor === Array) {\n        var newID = incID + 1;\n        var repID = repEncArrStack.length <= 1 ? newID : newID + \"xn\";\n        var arrLenStr = \"arrLen\" + incID;\n\n        if (repEncArrStack.length === 1) {\n          strEncodeRefDecs += declareEncodeRef(newID, saveID, prop);\n          strDecodeFunction += declareDecodeRef(newID, saveID, prop, \"[]\");\n        }\n\n        var encArrayLength = encodeArrayLength(repID);\n        var decArrayLength = decodeArrayLength(arrLenStr);\n        var byteArrayLength = getArrayLengthByteCount(repID);\n\n        declareRepeatRefs(isRepArrItem, newID, saveID, prop, container, repEncArrStack, repDecArrStack, repByteCountStack);\n\n        compileSchema(val, true);\n\n        tmpRepEncArr = encArrayLength + processArrayEnd(val, newID, repEncArrStack.pop() + tmpRepEncArr, repEncArrStack.length);\n        tmpRepDecArr = decArrayLength + processArrayEnd(val, newID, repDecArrStack.pop() + tmpRepDecArr, repEncArrStack.length, arrLenStr);\n        tmpRepByteCount = byteArrayLength + processArrayEnd(val, newID, repByteCountStack.pop() + tmpRepByteCount, repEncArrStack.length);\n\n        if (repEncArrStack.length === 1) {\n          strEncodeFunction += tmpRepEncArr; tmpRepEncArr = \"\";\n          strDecodeFunction += tmpRepDecArr; tmpRepDecArr = \"\";\n          strByteCount += tmpRepByteCount; tmpRepByteCount = \"\";\n        }\n      } else if (typeof val === 'object') {\n        var newID = incID + 1;\n\n        if (repEncArrStack.length === 1) {\n          strEncodeRefDecs += declareEncodeRef(newID, saveID, prop);\n          strDecodeFunction += declareDecodeRef(newID, saveID, prop, \"{}\");\n        }\n\n        declareRepeatRefs(isRepArrItem, newID, saveID, prop, container, repEncArrStack, repDecArrStack, repByteCountStack);\n\n        compileSchema(val, false);\n      } else {\n        var index = inArray ? \"\" : \"[\" + prop + \"]\";\n        var dataType = getDataType(val);\n        json[key] = dataType;\n\n        var repID = getXN(repEncArrStack, saveID);\n        if (inArray) { repID += isRepArrItem ? \"[j\" + saveID + \"]\" : \"[\" + i + \"]\"; }\n\n        repEncArrStack[repEncArrStack.length - 1] += encodeValue(dataType, repID, index, validate);\n        repDecArrStack[repDecArrStack.length - 1] += decodeValue(dataType, repID, index);\n        repByteCountStack[repByteCountStack.length - 1] += encodeByteCount(dataType, repID, index);\n\n        if (repEncArrStack.length > 1) { continue; }\n\n        var uniqID = inArray ? saveID + \"[\" + i + \"]\" : saveID;\n        strEncodeFunction += encodeValue(dataType, uniqID, index, validate);\n        strDecodeFunction += decodeValue(dataType, uniqID, index);\n        strByteCount += encodeByteCount(dataType, uniqID, index);\n      }\n    }\n  }\n\n  compileSchema(schema, false);\n\n  strByteCount = \"var byteC=0;\".concat(strByteCount, \"var wBuffer=bag.allocUnsafe(byteC);\")\n  strEncodeFunction = strEncodeRefDecs.concat(strByteCount, strEncodeFunction, \"return wBuffer;\");\n  strDecodeFunction = strDecodeFunction.concat(\"return ref1['a'];\");\n\n  var compiledEncode = new Function('json', 'bag', strEncodeFunction);\n  var compiledDecode = new Function('buffer', 'bag', strDecodeFunction);\n\n  return [ compiledEncode, compiledDecode ];\n}\n\nfunction build(schema, validate) {\n  var builtSchema = getCompiledSchema(schema, validate === undefined ? validateByDefault : validate);\n\n  var compiledEncode = builtSchema[0];\n  var compiledDecode = builtSchema[1];\n\n  return {\n    \"encode\": function(json) {\n      var itemWrapper = { \"a\": json };\n      return compiledEncode(itemWrapper, bag);\n    },\n    \"decode\": function(buffer) {\n      var bufferWrapper = Buffer.isBuffer(buffer) ? buffer : bufferFrom(buffer);\n      return compiledDecode(bufferWrapper, bag);\n    }\n  }\n}\n\naddTypeAlias('bool', 'boolean');\n\nmodule.exports = exports = {\n  \"build\": build,\n  \"addTypeAlias\": addTypeAlias,\n  \"setStringEncoding\": setStringEncoding,\n  \"setValidateByDefault\": setValidateByDefault\n};\n","/home/travis/build/npmtest/node-npmtest-schemapack/node_modules/schemapack/tonic.js":"const sp = require('schemapack');\n\n// Define the schema\nconst playerSchema = sp.build({\n  health: 'varuint',\n  jumping: 'boolean',\n  position: [ 'int16' ],\n  attributes: { str: 'uint8', agi: 'uint8', int: 'uint8' },\n});\n\n// An object to serialize\nconst player = {\n  health: 4000,\n  jumping: false,\n  position: [ -540, 343, 1201 ],\n  attributes: { str: 87, agi: 42, int: 22 },\n};\n\n// Encode\nconst buffer = playerSchema.encode(player);\nconsole.log(buffer);\n// Decode\nconst decoded = playerSchema.decode(buffer);\nconsole.log(decoded);\n"}